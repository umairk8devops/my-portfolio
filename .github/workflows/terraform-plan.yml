name: Terraform Plan Only

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
      destroy:
        description: 'Run terraform plan -destroy'
        required: false
        default: false
        type: boolean
  
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-plan.yml'

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.9.8

permissions:
  contents: read
  pull-requests: write  # For PR comments

jobs:
  terraform-plan:
    name: Terraform Plan (Production)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -diff -recursive
      continue-on-error: true
      
    - name: Terraform Init
      id: init
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate
      
    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        github_repo = "${{ github.repository }}"
        aws_region = "${{ env.AWS_REGION }}"
        environment = "prod"
        EOF
        
        # Add VPC configuration if secrets are available
        if [ -n "${{ secrets.VPC_ID }}" ]; then
          cat >> terraform.tfvars << EOF
        vpc_id = "${{ secrets.VPC_ID }}"
        private_subnet_ids = [$(echo "${{ secrets.PRIVATE_SUBNET_IDS }}" | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')"]
        public_subnet_ids = [$(echo "${{ secrets.PUBLIC_SUBNET_IDS }}" | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')"]
        EOF
        else
          echo "‚ö†Ô∏è  VPC secrets not configured - using example values"
          cat >> terraform.tfvars << EOF
        # vpc_id = "vpc-example123"
        # private_subnet_ids = ["subnet-example1", "subnet-example2"]
        # public_subnet_ids = ["subnet-example3", "subnet-example4"]
        EOF
        fi
        
        echo "üìÑ Generated terraform.tfvars:"
        cat terraform.tfvars
        
    - name: Terraform Plan
      id: plan
      run: |
        if [ -z "${{ secrets.VPC_ID }}" ]; then
          echo "üöß Running plan with example VPC values (will show validation errors)"
          echo "To get accurate plan results, add these GitHub secrets:"
          echo "‚Ä¢ VPC_ID: Your existing VPC ID"
          echo "‚Ä¢ PRIVATE_SUBNET_IDS: Comma-separated private subnet IDs"  
          echo "‚Ä¢ PUBLIC_SUBNET_IDS: Comma-separated public subnet IDs"
          echo ""
        fi
        
        # Determine plan options
        PLAN_OPTIONS=""
        if [ "${{ github.event.inputs.destroy }}" = "true" ]; then
          PLAN_OPTIONS="-destroy"
          echo "üî• Running DESTROY plan"
        fi
        
        # Run terraform plan
        if [ -n "${{ secrets.VPC_ID }}" ]; then
          terraform plan $PLAN_OPTIONS -no-color -out=tfplan
        else
          terraform plan $PLAN_OPTIONS -no-color -out=tfplan || true
        fi
        
        # Generate human-readable output
        terraform show -no-color tfplan > plan_output.txt 2>/dev/null || echo "Plan output not available" > plan_output.txt
        
        # Create summary
        echo "## Plan Summary" > plan_summary.txt
        if [ "${{ github.event.inputs.destroy }}" = "true" ]; then
          echo "üî• **DESTROY PLAN** - This will delete resources!" >> plan_summary.txt
        fi
        echo "Environment: Production" >> plan_summary.txt
        echo "AWS Region: ${{ env.AWS_REGION }}" >> plan_summary.txt
        echo "Repository: ${{ github.repository }}" >> plan_summary.txt
        echo "" >> plan_summary.txt
        
        # Extract resource changes
        if terraform show -json tfplan > /dev/null 2>&1; then
          CHANGES=$(terraform show -json tfplan | jq -r '.resource_changes[]?.change.actions[]?' 2>/dev/null | sort | uniq -c | sort -nr || echo "Could not parse changes")
          echo "Resource Changes:" >> plan_summary.txt
          echo '```' >> plan_summary.txt
          echo "$CHANGES" >> plan_summary.txt
          echo '```' >> plan_summary.txt
        fi
      continue-on-error: true
      
    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-prod-${{ github.run_number }}
        path: |
          terraform/tfplan
          terraform/plan_output.txt
          terraform/plan_summary.txt
          terraform/terraform.tfvars
        retention-days: 30
        
    - name: Comment on Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Read plan outputs
          let planOutput = '';
          let summary = '';
          
          try {
            planOutput = fs.readFileSync('terraform/plan_output.txt', 'utf8');
            summary = fs.readFileSync('terraform/plan_summary.txt', 'utf8');
          } catch (error) {
            planOutput = 'Could not read plan output';
            summary = 'Could not read plan summary';
          }
          
          const output = `## üèóÔ∏è Terraform Plan Results
          
          ${summary}
          
          #### Terraform Format Check üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìã \`${{ steps.plan.outcome }}\`
          
          <details><summary>üìñ Show Full Plan Output</summary>
          
          \`\`\`terraform
          ${planOutput.length > 60000 ? planOutput.substring(0, 60000) + '\n\n... (output truncated, check artifacts for full plan)' : planOutput}
          \`\`\`
          
          </details>
          
          ---
          *ü§ñ Auto-generated by [Terraform Plan workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) | üë§ Triggered by @${{ github.actor }}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
    - name: Job Summary
      if: always()
      run: |
        echo "## üèóÔ∏è Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "plan_summary.txt" ]; then
          cat plan_summary.txt >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Step Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Format: ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "- Init: ${{ steps.init.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "- Validate: ${{ steps.validate.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "- Plan: ${{ steps.plan.outcome }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ secrets.VPC_ID }}" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **VPC Configuration**: Using actual VPC secrets" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **VPC Configuration**: Using example values (add VPC_ID, PRIVATE_SUBNET_IDS, PUBLIC_SUBNET_IDS secrets for accurate plans)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üì¶ **Artifacts**: Plan files uploaded for 30 days" >> $GITHUB_STEP_SUMMARY
        
    - name: Plan Status Check
      if: steps.plan.outcome == 'failure'
      env:
        HAS_VPC_CONFIG: ${{ secrets.VPC_ID != '' }}
      run: |
        if [ "$HAS_VPC_CONFIG" = "true" ]; then
          echo "‚ùå Terraform plan failed with real VPC configuration"
          exit 1
        else
          echo "‚ö†Ô∏è  Plan failed but VPC secrets not configured - this is expected"
          echo "Add VPC_ID, PRIVATE_SUBNET_IDS, and PUBLIC_SUBNET_IDS secrets for accurate validation"
        fi