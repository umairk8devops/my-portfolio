name: Deploy Portfolio to ECS (AWS Keys)

on:
  workflow_dispatch:  # Manual trigger only
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: portfolio-app
  ECS_CLUSTER_NAME: portfolio-cluster-ecs
  ECS_SERVICE_NAME: portfolio-service

permissions:
  contents: read

jobs:
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'
  #       cache: 'npm'
  #       
  #   - name: Install dependencies
  #     run: npm ci
  #     
  #   - name: Run tests
  #     run: npm test -- --coverage --watchAll=false
  #     
  #   - name: Build application
  #     run: npm run build

  fix-infrastructure:
    name: Fix Target Group Configuration
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.8
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Apply target group fix
      run: |
        echo "üîß Applying target group configuration fix..."
        terraform plan -target=aws_lb_target_group.portfolio -out=tg-fix.tfplan
        terraform apply -auto-approve tg-fix.tfplan
        echo "‚úÖ Target group configuration updated"

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: fix-infrastructure
    # needs: test  # Commented out to skip tests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      id: build-image

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create ECS task definition
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get current task definition
        CURRENT_TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition portfolio-task \
          --query 'taskDefinition' \
          --output json)
        
        # Get AWS account ID dynamically
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Update image in task definition
        NEW_TASK_DEF=$(echo $CURRENT_TASK_DEF | jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" \
          '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
        
        # Register new task definition
        echo $NEW_TASK_DEF > task-definition.json
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV
        
    - name: Deploy to ECS
      run: |
        # Update ECS service with new task definition
        echo "üöÄ Starting ECS service update..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER_NAME }} \
          --service ${{ env.ECS_SERVICE_NAME }} \
          --task-definition $NEW_TASK_DEF_ARN \
          --force-new-deployment
        
        echo "‚è≥ Deployment initiated. Monitoring for 5 minutes..."
        
        # Monitor deployment progress without strict waiting
        for i in {1..10}; do
          echo "üìä Check $i/10 - Waiting 30 seconds..."
          sleep 30
          
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --services ${{ env.ECS_SERVICE_NAME }} \
            --query 'services[0].{Status:status,Running:runningCount,Desired:desiredCount,Pending:pendingCount}' \
            --output table)
          
          echo "$SERVICE_STATUS"
          
          # Check if we have running tasks
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --services ${{ env.ECS_SERVICE_NAME }} \
            --query 'services[0].runningCount' \
            --output text)
          
          if [ "$RUNNING_COUNT" -gt "0" ]; then
            echo "‚úÖ Service has $RUNNING_COUNT running task(s)"
            break
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ö†Ô∏è  Deployment monitoring completed after 5 minutes"
            echo "üí° Service may still be stabilizing. Check AWS Console for details."
          fi
        done
        
    - name: Verify deployment
      run: |
        echo "üîç === DEPLOYMENT VERIFICATION ==="
        
        # Get detailed service status
        echo "üìã Service Status:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER_NAME }} \
          --services ${{ env.ECS_SERVICE_NAME }} \
          --query 'services[0].{ServiceName:serviceName,Status:status,RunningCount:runningCount,DesiredCount:desiredCount,PendingCount:pendingCount}' \
          --output table
        
        # Get recent deployments
        echo ""
        echo "üöÄ Recent Deployments:"
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER_NAME }} \
          --services ${{ env.ECS_SERVICE_NAME }} \
          --query 'services[0].deployments[*].{Status:status,TaskDefinition:taskDefinition,RunningCount:runningCount,DesiredCount:desiredCount,CreatedAt:createdAt}' \
          --output table
        
        # Get running tasks
        echo ""
        echo "üì¶ Running Tasks:"
        aws ecs list-tasks \
          --cluster ${{ env.ECS_CLUSTER_NAME }} \
          --service-name ${{ env.ECS_SERVICE_NAME }} \
          --query 'taskArns[*]' \
          --output text | while read task_arn; do
          if [ ! -z "$task_arn" ]; then
            echo "Task: $task_arn"
            aws ecs describe-tasks \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --tasks $task_arn \
              --query 'tasks[0].{LastStatus:lastStatus,HealthStatus:healthStatus,CreatedAt:createdAt}' \
              --output table
          fi
        done
        
        # Check target group health
        echo ""
        echo "üéØ Target Group Health:"
        ALB_TG_ARN=$(aws elbv2 describe-target-groups \
          --names portfolio-cluster-tg \
          --query 'TargetGroups[0].TargetGroupArn' \
          --output text)
        
        if [ "$ALB_TG_ARN" != "None" ]; then
          aws elbv2 describe-target-health \
            --target-group-arn $ALB_TG_ARN \
            --query 'TargetHealthDescriptions[*].{Target:Target.Id,Port:Target.Port,Health:TargetHealth.State,Reason:TargetHealth.Reason}' \
            --output table
        else
          echo "‚ùå Target group not found"
        fi
        
        # Get load balancer DNS
        echo ""
        echo "üåê Application URL:"
        LB_DNS=$(aws elbv2 describe-load-balancers \
          --names portfolio-cluster-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        if [ "$LB_DNS" != "None" ]; then
          echo "http://$LB_DNS"
          echo ""
          echo "üîß If the app isn't working, check:"
          echo "1. Target group health (above)"
          echo "2. ECS service events in AWS Console"
          echo "3. Container logs in CloudWatch"
        else
          echo "‚ùå Load balancer not found"
        fi