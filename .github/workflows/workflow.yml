name: Deploy Portfolio to ECS (AWS Keys)

on:
  workflow_dispatch:  # Manual trigger only
  
  # Uncomment these after setting up your AWS infrastructure and secrets:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: portfolio-app
  ECS_CLUSTER_NAME: portfolio-cluster-ecs
  ECS_SERVICE_NAME: portfolio-service
  TF_VERSION: 1.9.8

permissions:
  contents: read
  pull-requests: write  # Needed for Terraform plan comments

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Format Check
      run: terraform fmt -check
      continue-on-error: true
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Create terraform.tfvars for CI
      run: |
        cat > terraform.tfvars << EOF
        github_repo = "${{ github.repository }}"
        aws_region = "${{ env.AWS_REGION }}"
        environment = "prod"
        
        # These would be provided by your existing infrastructure
        # vpc_id = "vpc-xxxxxxxxx"
        # private_subnet_ids = ["subnet-xxxxxxxxx", "subnet-yyyyyyyyy"]
        # public_subnet_ids = ["subnet-zzzzzzzzz", "subnet-aaaaaaaaa"]
        EOF
        
    - name: Terraform Plan
      id: plan
      run: |
        # Skip plan if required infrastructure variables are not set
        if [ -z "${{ secrets.VPC_ID }}" ]; then
          echo "Skipping Terraform plan - VPC_ID secret not configured"
          echo "To enable infrastructure validation, add these GitHub secrets:"
          echo "- VPC_ID: Your existing VPC ID"
          echo "- PRIVATE_SUBNET_IDS: Comma-separated private subnet IDs"  
          echo "- PUBLIC_SUBNET_IDS: Comma-separated public subnet IDs"
          exit 0
        fi
        
        # Update tfvars with actual values if secrets are available
        cat >> terraform.tfvars << EOF
        vpc_id = "${{ secrets.VPC_ID }}"
        private_subnet_ids = [$(echo "${{ secrets.PRIVATE_SUBNET_IDS }}" | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')"]
        public_subnet_ids = [$(echo "${{ secrets.PUBLIC_SUBNET_IDS }}" | sed 's/,/","/g' | sed 's/^/"/' | sed 's/$/"/')"]
        EOF
        
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
      continue-on-error: true
      
    - name: Update Pull Request (if PR)
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let planOutput = '';
          try {
            planOutput = fs.readFileSync('terraform/plan_output.txt', 'utf8');
          } catch (error) {
            planOutput = 'Could not read plan output';
          }
          
          const output = `#### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${planOutput}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: terraform-plan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Build application
      run: npm run build

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      id: build-image

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create ECS task definition
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get current task definition
        CURRENT_TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition portfolio-task \
          --query 'taskDefinition' \
          --output json)
        
        # Get AWS account ID dynamically
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Update image in task definition
        NEW_TASK_DEF=$(echo $CURRENT_TASK_DEF | jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" \
          '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
        
        # Register new task definition
        echo $NEW_TASK_DEF > task-definition.json
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV
        
    - name: Deploy to ECS
      run: |
        # Update ECS service with new task definition
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER_NAME }} \
          --service ${{ env.ECS_SERVICE_NAME }} \
          --task-definition $NEW_TASK_DEF_ARN \
          --force-new-deployment
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER_NAME }} \
          --services ${{ env.ECS_SERVICE_NAME }}
        
        echo "‚úÖ Deployment completed successfully!"
        
    - name: Verify deployment
      run: |
        # Get service status
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER_NAME }} \
          --services ${{ env.ECS_SERVICE_NAME }} \
          --query 'services[0].{ServiceName:serviceName,Status:status,RunningCount:runningCount,DesiredCount:desiredCount}'
        
        # Get load balancer DNS
        echo "üåê Application URL:"
        aws elbv2 describe-load-balancers \
          --names ${{ env.ECS_CLUSTER_NAME }}-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text